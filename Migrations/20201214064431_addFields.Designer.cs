// <auto-generated />
using System;
using SingleWellWebApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace SingleWellWebApi.Migrations
{
    [DbContext(typeof(SingleWellWebContext))]
    [Migration("20201214064431_addFields")]
    partial class addFields
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("SingleWellWebApi.Models.BaseInfo.Driver", b =>
                {
                    b.Property<Guid>("PK")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Company")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreateUser")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastUpdateUser")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.HasKey("PK");

                    b.ToTable("Driver");
                });

            modelBuilder.Entity("SingleWellWebApi.Models.BaseInfo.OilStation", b =>
                {
                    b.Property<Guid>("PK")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Branch")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreateUser")
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<string>("HMIIP")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastUpdateUser")
                        .HasColumnType("text");

                    b.Property<string>("Latitude")
                        .HasColumnType("text");

                    b.Property<float>("LevelCalcFactor")
                        .HasColumnType("real");

                    b.Property<float>("LevelCalcOffset")
                        .HasColumnType("real");

                    b.Property<string>("Longitude")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("OilPot")
                        .HasColumnType("text");

                    b.Property<string>("PLCIP")
                        .HasColumnType("text");

                    b.Property<float>("PumpCalcFactor")
                        .HasColumnType("real");

                    b.Property<float>("PumpCalcOffset")
                        .HasColumnType("real");

                    b.Property<float>("PumpRatedFlow")
                        .HasColumnType("real");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<float>("VolumnPer1cm")
                        .HasColumnType("real");

                    b.HasKey("PK");

                    b.ToTable("OilStation");
                });

            modelBuilder.Entity("SingleWellWebApi.Models.BaseInfo.Truck", b =>
                {
                    b.Property<Guid>("PK")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Company")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreateUser")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastUpdateUser")
                        .HasColumnType("text");

                    b.Property<string>("LeadSealNumber")
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<float>("Volumn")
                        .HasColumnType("real");

                    b.HasKey("PK");

                    b.ToTable("Truck");
                });

            modelBuilder.Entity("SingleWellWebApi.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("Branch")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreateUser")
                        .HasColumnType("text");

                    b.Property<string>("CurrentAuthority")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastUpdateUser")
                        .HasColumnType("text");

                    b.Property<string>("Mobile")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("SingleWellWebApi.Models.Work.WorkTicket", b =>
                {
                    b.Property<Guid>("PK")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreateUser")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Driver")
                        .HasColumnType("text");

                    b.Property<string>("DriverPhone")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastUpdateUser")
                        .HasColumnType("text");

                    b.Property<float>("LevelAfterLoad")
                        .HasColumnType("real");

                    b.Property<float>("LevelBeginLoad")
                        .HasColumnType("real");

                    b.Property<string>("LoadStation")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LoadingActualBeginTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LoadingActualEndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LoadingBeginTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LoadingEndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("OilError")
                        .HasColumnType("real");

                    b.Property<float>("OilLoaded")
                        .HasColumnType("real");

                    b.Property<float>("OilLoadedMax")
                        .HasColumnType("real");

                    b.Property<string>("OilLoader")
                        .HasColumnType("text");

                    b.Property<float>("OilUnloaded")
                        .HasColumnType("real");

                    b.Property<string>("OilUnloader")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("Reviewer")
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("SubSerialNumber")
                        .HasColumnType("text");

                    b.Property<float>("TaskDuration")
                        .HasColumnType("real");

                    b.Property<string>("UnloadStation")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UnloadingBeginTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("UnloadingEndTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("PK");

                    b.ToTable("WorkTicket");
                });
#pragma warning restore 612, 618
        }
    }
}
